<dataConfig>
  <dataSource driver="org.postgresql.Driver"
              url="jdbc:postgresql:egrin2"
              user="dj_ango" password="django" />
  <document name="genes">
    <!--
    <entity name="gene" query="select g.id, g.species_id, g.accession, g.gi, g.start, g.stop, g.strand, g.sys_name, g.name, g.description, g.chromosome_id from egrin2_django_gene g"> -->
    <entity name="gene" query="select q1.id, q1.species_id, q1.accession, q1.gi, q1.start, q1.stop, q1.strand, q1.sys_name, q1.name, q1.description, chromosome_id, num_conds, num_corems, num_gres from (select g.id, g.species_id, g.accession, g.gi, g.start, g.stop, g.strand, g.sys_name, g.name, g.description, g.chromosome_id, count(gc.id) as num_conds from egrin2_django_gene g join egrin2_django_geneconditionmembership gc on g.id = gc.gene_id group by g.id) q1 join (select cg.gene_id, count(cg.corem_id) as num_corems from egrin2_django_corem_genes cg group by cg.gene_id) q2 on q1.id = q2.gene_id join (select gg.gene_id, count(gg.gre_id) num_gres from egrin2_django_gregenemembership gg group by gg.gene_id) q3 on q1.id = q3.gene_id">
      <entity name="species" transformer="TemplateTransformer"
              query="select s.name, s.short_name, s.ncbi_taxonomy_id from egrin2_django_species s where s.id = ${gene.species_id}">
        <field column="species" template="${species.name} (${species.short_name})" />
      </entity>
      <entity name="network" transformer="TemplateTransformer"
              query="select n.name, n.version_id from egrin2_django_network n join egrin2_django_species s on n.species_id = s.id where s.id = ${gene.species_id}">
        <field column="network" template="${network.name} (${network.version_id})" />
      </entity>
    </entity>
  </document>
</dataConfig>
